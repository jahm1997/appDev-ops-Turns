package com.unicartagena.turnos.view;

import com.unicartagena.turnos.model.ModeloTurnos;
import com.unicartagena.turnos.model.entity.Turno;
import java.awt.Color;
import java.awt.Font;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;
import javax.swing.Timer;

/**
 *
 * @author Dev-Ops
 */
public final class VistaListaTurnos extends javax.swing.JFrame {

    private Timer timer;

    /**
     * Creates new form VistaListaTurnos
     */
    public VistaListaTurnos() {
        initComponents();
        ModeloTurnos.agregarObservador(this);
        configurarEstadoColumna();
        actualizarTabla();

        this.setTitle("Lista de clientes");
        this.setLocationRelativeTo(null); // Centrar ventana
        setLocation(getLocation().x + 200, getLocation().y); //desplazar a la derecha un poco

        //Agregar color a la cabeza de la tabla
        tablaTurnos.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 12));
        tablaTurnos.getTableHeader().setOpaque(false);
        tablaTurnos.getTableHeader().setBackground(new Color(32, 136, 203));
        tablaTurnos.getTableHeader().setForeground(new Color(255, 255, 255));

        // Inicializar el timer
        iniciarTimer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaTurnos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        tablaTurnos.setAutoCreateRowSorter(true);
        tablaTurnos.setBackground(new java.awt.Color(255, 255, 255));
        tablaTurnos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tablaTurnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Apellido", "Teléfono", "Correo", "Día de Ingreso", "Placa de Vehículo", "Tiempo Transcurrido", "Cambiar Estado", "Turno", "Fecha Cierre"
            }
        ));
        tablaTurnos.setPreferredSize(new java.awt.Dimension(600, 90));
        jScrollPane1.setViewportView(tablaTurnos);
        if (tablaTurnos.getColumnModel().getColumnCount() > 0) {
            tablaTurnos.getColumnModel().getColumn(0).setHeaderValue("Nombre");
            tablaTurnos.getColumnModel().getColumn(1).setHeaderValue("Apellido");
            tablaTurnos.getColumnModel().getColumn(2).setHeaderValue("Teléfono");
            tablaTurnos.getColumnModel().getColumn(3).setHeaderValue("Correo");
            tablaTurnos.getColumnModel().getColumn(4).setHeaderValue("Día de Ingreso");
            tablaTurnos.getColumnModel().getColumn(5).setHeaderValue("Placa de Vehículo");
            tablaTurnos.getColumnModel().getColumn(6).setHeaderValue("Tiempo Transcurrido");
            tablaTurnos.getColumnModel().getColumn(7).setHeaderValue("Cambiar Estado");
            tablaTurnos.getColumnModel().getColumn(8).setHeaderValue("Turno");
            tablaTurnos.getColumnModel().getColumn(9).setHeaderValue("Fecha Cierre");
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 675, Short.MAX_VALUE)
                .addGap(44, 44, 44))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                .addGap(91, 91, 91))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public void actualizarTabla() {
        DefaultTableModel modelo = (DefaultTableModel) tablaTurnos.getModel();
        modelo.setRowCount(0);

        for (Turno turno : ModeloTurnos.obtenerTurnos()) {
            String tiempoTranscurrido;
            if (turno.getFechaCierre() == null) {
                // Calcular tiempo transcurrido solo si el ticket no está cerrado
                tiempoTranscurrido = calcularTiempoTranscurrido(turno.getDiaIngreso());
            } else if ("Sin Cerrar".equals(turno.getFechaCierre())) {
                tiempoTranscurrido = calcularTiempoTranscurrido(turno.getDiaIngreso());
            } else {
                // Si el ticket está cerrado, mostrar tiempo transcurrido fijo
                tiempoTranscurrido = "0h 0m";
            }

            modelo.addRow(new Object[]{
                turno.getNombre(),
                turno.getApellido(),
                turno.getTelefono(),
                turno.getCorreo(),
                turno.getDiaIngreso(),
                turno.getPlacaVehiculo(),
                tiempoTranscurrido,
                turno.getEstado(),
                turno.getNumeroTurno(),
                turno.getFechaCierre() != null ? turno.getFechaCierre() : "Sin Cerrar"
            });
        }
    }

    private String calcularTiempoTranscurrido(String diaIngreso) {
        try {
            LocalDateTime ingreso = LocalDateTime.parse(diaIngreso, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"));
            Duration duracion = Duration.between(ingreso, LocalDateTime.now());
            long horas = duracion.toHours();
            long minutos = duracion.toMinutes() % 60;
            return horas + "h " + minutos + "m";
        } catch (Exception e) {
            return "Formato inválido";
        }
    }

    private void configurarEstadoColumna() {
        tablaTurnos.getColumnModel().getColumn(7).setCellRenderer((table, value, isSelected, hasFocus, row, column) -> {
            String estado = (String) value;
            if ("En espera".equals(estado)) {
                return new JButton(estado);
            } else {
                return new JLabel(estado);
            }
        });
        tablaTurnos.getColumnModel().getColumn(7).setCellEditor(new EstadoCellEditor());
    }

    private void iniciarTimer() {
        // Crear un Timer que actualice la tabla cada segundo
        timer = new Timer(1000, e -> actualizarTabla());
        timer.start(); // Iniciar el Timer
    }

    @Override
    public void dispose() {
        // Detener el timer cuando la ventana se cierre
        if (timer != null && timer.isRunning()) {
            timer.stop();
        }
        super.dispose();
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            new VistaListaTurnos().setVisible(true);
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaTurnos;
    // End of variables declaration//GEN-END:variables

    private class EstadoCellEditor extends javax.swing.AbstractCellEditor implements javax.swing.table.TableCellEditor {

        private JButton button;

        @Override
        public Object getCellEditorValue() {
            return button.getText();
        }

        @Override
        public java.awt.Component getTableCellEditorComponent(javax.swing.JTable table, Object value, boolean isSelected, int row, int column) {
            String estado = (String) value;
            if ("En espera".equals(estado)) {
                button = new JButton(estado);
                button.addActionListener(e -> {
                    int numeroTurno = (int) table.getValueAt(row, 8);
                    ModeloTurnos.cambiarEstadoTurno(numeroTurno, "Atendido");
                    fireEditingStopped();
                });
                return button;
            } else {
                return new JLabel(estado);
            }
        }
    }

}
